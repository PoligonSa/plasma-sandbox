name: Check

on:
  merge_group:
  pull_request:
    branches:
      - dev
      - main

env:
  RUN_URL: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  STATUS_URL: "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }}"
jobs:
  run:
    name: Check Health
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version-file: '.nvmrc'

      - name: Install
        run: npm ci --no-audit

      - name: Lerna bootstrap
        run: npx lerna bootstrap

      - name: Lint
        id: lint
        run: |
          npm run lint

      - name: Set commit status "success"
        run: |
          step_nr=$(echo '${{ toJson(steps) }}' | jq -n)
          echo "$step_nr"
          res=$(curl \
            -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_TOKEN }}" \
            ${{ env.STATUS_URL }} \
            -d '{"state":"success","target_url":"${{ env.RUN_URL }}","description": " 2 ": Successful", }') || exit 1
          echo $res
          if [[ $res != *"success"* ]]; then
            exit 1
          fi

  catch:
    name: Catch errors
    runs-on: ubuntu-latest
    needs: run
    if: ${{ always() && contains(needs.*.result, 'failure') }}

    steps:
      - name: Set commit status "failure"
        run: |
          echo "${GITHUB_RUN_ID}"
          echo "${GITHUB_RUN_ID}"
          echo "${GITHUB_JOB}"
          echo "${GITHUB_TRIGGERING_ACTOR}"

      - name: Get jobs information
        id: job
        uses: actions/github-script@v6
        env:
          RUN_ID: ${{github.run_id}}
        with:
          script: |
            const { RUN_ID } = process.env;
            
            const { data: { jobs: jobsList } } = await github.rest.actions.listJobsForWorkflowRun({
              run_id: RUN_ID,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            // TODO: Input name job for FIND
            const { html_url, steps: stepsList } = jobsList.find(({ name }) => name === "Check Health")
                        
            const {name, conclusion} = stepsList.find(({ conclusion }) => conclusion === "failure" )
            
            return { targetUrl: html_url, name, conclusion }

      - name: shortener
        id: shortener
        uses: Gottox/url-shortener-action@v1.0.0
        with:
          url: ${{ fromJSON(steps.job.outputs.result).targetUrl }}

      - name: Create message
        env:
          STATUS: ${{ fromJSON(steps.job.outputs.result).conclusion }}
          FAILURE_STEP: ${{ fromJSON(steps.job.outputs.result).name }}
          TARGET_URL: ${{ steps.shortener.outputs.short_url }}
        run: |
          echo "NOTIFICATION=##### Status: ${{ env.STATUS }}\n###### Failure step: ${{env.FAILURE_STEP}}\n###### Link: ${{ env.TARGET_URL }}" >> $GITHUB_ENV

      - name: Create the Mattermost Message
        run: |
          echo "{\"text\":\" ${{ env.NOTIFICATION }}\"}" > mattermost.json

      - name: Send notification
        uses: mattermost/action-mattermost-notify@master
        env:
          MATTERMOST_WEBHOOK_URL: ${{ secrets.WEBHOOKS_NOTIFICATIONS_MM }}
